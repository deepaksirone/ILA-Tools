module main {
	instance cpu_i_1 : set_p0();
	instance cpu_i_2 : set_p0();
	
	init {

	        assume
        	    (cpu_i_1.IRAM[28bv8] != cpu_i_2.IRAM[28bv8]);
		assume
	    	    (cpu_i_1.IRAM[29bv8] != cpu_i_2.IRAM[29bv8]);
        	assume
            	    (cpu_i_1.P0 == cpu_i_2.P0);
	}

	next {
		next (cpu_i_1);
		next (cpu_i_2);
	}

	invariant neq_secret_data:
		( (cpu_i_1.IRAM[29bv8] != cpu_i_2.IRAM[29bv8]));
	invariant eq_inst:
		(forall (a : bv16) :: ((0bv16 <= a && a <= 149bv16) ==> cpu_i_1.ROM[a] == cpu_i_2.ROM[a]));
	invariant eq_PSW:
		(cpu_i_1.PSW == cpu_i_2.PSW);
	invariant eq_ACC:
		(cpu_i_1.ACC == cpu_i_2.ACC);
	invariant eq_PC:
		(cpu_i_1.PC == cpu_i_2.PC);
	invariant eq_SP:
		(cpu_i_1.SP == cpu_i_2.SP);
	invariant eq_state:
		(cpu_i_1.current_state == cpu_i_2.current_state);

	//Redundant as all the IRAM is covered by eq_mem
    	//invariant eq_secret:
        //(forall (a: bv8) :: ((18bv8 <= a && a < 28bv8) ==> (cpu_i_1.IRAM[a] == cpu_i_2.IRAM[a])));
	//invariant eq_non_secret_data:
	//	(forall (a: bv8) :: ((18bv8 <= a && a < 28bv8) ==> ((cpu_i_1.IRAM[a] == 0bv8) ==> (cpu_i_1.IRAM[a - 10bv8] == cpu_i_2.IRAM[a - 10bv8]))));
	//invariant eq_data:
	//	(forall (a: bv8) :: ((8bv8 <= a && a < 18bv8) ==> ((cpu_i_1.IRAM[a] == cpu_i_2.IRAM[a]))));
	invariant eq_p0:
		(cpu_i_1.P0 == cpu_i_2.P0);
	//invariant eq_i:
	//	(cpu_i_1.IRAM[28bv8] == cpu_i_2.IRAM[28bv8]);
	//invariant eq_n:
	//	(cpu_i_1.IRAM[30bv8] == cpu_i_2.IRAM[30bv8]);


	control {
		v = induction;
		check;
		print_results;
		v.print_cex(cpu_i_1.PC, cpu_i_2.PC, cpu_i_1.current_state, cpu_i_2.current_state);
	}
}
